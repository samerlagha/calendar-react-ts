{"version":3,"sources":["store/reducers/auth/types.ts","utils/rules.ts","hooks/useTypedSelector.ts","store/reducers/event/types.ts","api/UserService.ts","store/reducers/auth/action-creators.ts","store/reducers/event/action-creators.ts","router/index.ts","store/reducers/action-creators.ts","hooks/useActions.ts","components/LoginForm.tsx","pages/Login.tsx","utils/date.ts","components/EventCalendar.tsx","components/EventForm.tsx","pages/Event.tsx","components/AppRouter.tsx","components/Navbar.tsx","App.tsx","store/reducers/auth/index.ts","store/reducers/event/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["AuthActionEnum","rules","message","required","validator","_","value","isSameOrAfter","moment","Promise","resolve","reject","Error","useTypedSelector","useSelector","EventActionEnum","UserService","axios","get","AuthActionCreators","setUser","user","type","SET_USER","payload","setIsAuth","auth","SET_AUTH","setIsLoading","SET_IS_LOADING","setError","SET_ERROR","login","username","password","dispatch","a","setTimeout","getUsers","response","mockUser","data","find","localStorage","setItem","e","logout","removeItem","RouteNames","EventActionCreators","setGuests","SET_GUESTS","setEvents","SET_EVENTS","fetchGuests","console","log","createEvent","event","events","getItem","json","JSON","parse","push","stringify","fetchEvents","currentUserEvents","filter","ev","author","guest","allActionCreators","useActions","useDispatch","bindActionCreators","LoginForm","state","error","isLoading","useState","setUsername","setPassword","onFinish","style","color","Item","label","name","onChange","target","htmlType","loading","Login","justify","align","className","formatDate","date","year","getFullYear","month","getMonth","day","getDate","EventCalendar","props","dateCellRender","formatedDate","toDate","currentDayEvents","map","index","description","EventForm","setEvent","submit","selectDate","guests","Option","Event","modalVisible","setModalVisible","useEffect","onClick","title","visible","footer","onCancel","publicRoutes","path","LOGIN","exact","component","privateRoutes","EVENT","AppRouter","isAuth","route","to","Navbar","router","useHistory","Header","theme","mode","selectable","App","Content","initialState","action","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a98af31.chunk.js","sourcesContent":["import {IUser} from \"../../../models/IUser\";\n\nexport interface AuthState {\n    isAuth: boolean;\n    user: IUser;\n    isLoading: boolean;\n    error: string;\n}\n\nexport enum AuthActionEnum {\n    SET_AUTH = \"SET_AUTH\",\n    SET_ERROR = \"SET_ERROR\",\n    SET_USER = \"SET_USER\",\n    SET_IS_LOADING = \"SET_IS_LOADING\",\n}\n\nexport interface SetAuthAction {\n    type: AuthActionEnum.SET_AUTH;\n    payload: boolean;\n}\nexport interface SetErrorAction {\n    type: AuthActionEnum.SET_ERROR;\n    payload: string;\n}\nexport interface SetUserAction {\n    type: AuthActionEnum.SET_USER;\n    payload: IUser;\n}\nexport interface SetIsLoadingAction {\n    type: AuthActionEnum.SET_IS_LOADING;\n    payload: boolean;\n}\n\nexport type AuthAction =\n    SetAuthAction |\n    SetUserAction |\n    SetErrorAction |\n    SetIsLoadingAction\n","import moment, {Moment} from \"moment\";\n\nexport const rules = {\n    required: (message: string = \"Обязательное поле\") => ({\n        required: true,\n        message\n    }),\n    isDateAfter: (message: string) => () => ({\n        validator(_: any, value: Moment) {\n            if (value.isSameOrAfter(moment())) {\n                return Promise.resolve()\n            }\n            return Promise.reject(new Error(message));\n        }\n    })\n}\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {RootState} from \"../store\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\n","import {IUser} from \"../../../models/IUser\";\nimport {IEvent} from \"../../../models/IEvent\";\n\n\nexport interface EventState {\n    guests: IUser[];\n    events: IEvent[];\n}\n\nexport enum EventActionEnum {\n    SET_GUESTS = \"SET_GUESTS\",\n    SET_EVENTS = \"SET_EVENTS\"\n}\n\nexport interface SetGuestsAction {\n    type: EventActionEnum.SET_GUESTS;\n    payload: IUser[]\n}\n\nexport interface SetEventsAction {\n    type: EventActionEnum.SET_EVENTS;\n    payload: IEvent[]\n}\n\nexport type EventAction =\n    SetGuestsAction |\n    SetEventsAction\n","import axios, {AxiosResponse} from \"axios\";\nimport {IUser} from \"../models/IUser\";\n\nexport default class UserService {\n    static async getUsers(): Promise<AxiosResponse<IUser[]>> {\n        return axios.get<IUser[]>('./users.json')\n    }\n}\n","import {AuthActionEnum, SetAuthAction, SetErrorAction, SetIsLoadingAction, SetUserAction} from \"./types\";\nimport {IUser} from \"../../../models/IUser\";\nimport {AppDispatch} from \"../../index\";\nimport UserService from \"../../../api/UserService\";\n\nexport const AuthActionCreators = {\n    setUser: (user: IUser): SetUserAction => ({type: AuthActionEnum.SET_USER, payload: user}),\n    setIsAuth: (auth: boolean): SetAuthAction => ({type: AuthActionEnum.SET_AUTH, payload: auth}),\n    setIsLoading: (payload: boolean): SetIsLoadingAction => ({type: AuthActionEnum.SET_IS_LOADING, payload}),\n    setError: (payload: string): SetErrorAction => ({type: AuthActionEnum.SET_ERROR, payload}),\n    login: (username: string, password: string) => async (dispatch: AppDispatch) => {\n        try {\n            dispatch(AuthActionCreators.setIsLoading(true));\n            setTimeout(async () => {\n                const response = await UserService.getUsers()\n                const mockUser = response.data.find(user => user.username === username && user.password === password);\n                if (mockUser) {\n                    localStorage.setItem('auth', 'true');\n                    localStorage.setItem('username', mockUser.username);\n                    dispatch(AuthActionCreators.setUser(mockUser));\n                    dispatch(AuthActionCreators.setIsAuth(true))\n                } else {\n                    dispatch(AuthActionCreators.setError('Некорректный логин или пароль'));\n                }\n                dispatch(AuthActionCreators.setIsLoading(false));\n            }, 1000)\n        } catch (e) {\n            dispatch(AuthActionCreators.setError('Произошла ошибка при логине'))\n        }\n    },\n    logout: () => async (dispatch: AppDispatch) => {\n        localStorage.removeItem('auth')\n        localStorage.removeItem('username')\n        dispatch(AuthActionCreators.setUser({} as IUser));\n        dispatch(AuthActionCreators.setIsAuth(false))\n    }\n}\n","import {EventActionEnum, SetEventsAction, SetGuestsAction} from \"./types\";\nimport {IUser} from \"../../../models/IUser\";\nimport {IEvent} from \"../../../models/IEvent\";\nimport {AppDispatch} from \"../../index\";\nimport UserService from \"../../../api/UserService\";\n\nexport const EventActionCreators = {\n    setGuests: (payload: IUser[]): SetGuestsAction => ({type: EventActionEnum.SET_GUESTS, payload}),\n    setEvents: (payload: IEvent[]): SetEventsAction => ({type: EventActionEnum.SET_EVENTS, payload}),\n    fetchGuests: () =>  async (dispatch: AppDispatch) => {\n        try {\n            const response = await UserService.getUsers()\n            dispatch(EventActionCreators.setGuests(response.data));\n        } catch (e) {\n            console.log(e);\n        }\n    },\n    createEvent: (event: IEvent) =>  async (dispatch: AppDispatch) => {\n        try {\n            const events = localStorage.getItem(\"events\") || '[]'\n            const json = JSON.parse(events) as IEvent[];\n            json.push(event);\n            dispatch(EventActionCreators.setEvents(json));\n            localStorage.setItem('events', JSON.stringify(json));\n        } catch (e) {\n            console.log(e)\n        }\n    },\n    fetchEvents: (username: string) => async (dispatch: AppDispatch) => {\n        try {\n            const events = localStorage.getItem(\"events\") || '[]'\n            const json = JSON.parse(events) as IEvent[];\n            const currentUserEvents = json.filter(ev => ev.author === username || ev.guest === username);\n            dispatch(EventActionCreators.setEvents(currentUserEvents));\n        } catch (e) {\n            console.log(e)\n        }\n    }\n}\n","import React from \"react\";\nimport Login from \"../pages/Login\";\nimport Event from '../pages/Event';\n\nexport interface IRoute {\n    path: string;\n    component: React.ComponentType;\n    exact?: boolean;\n}\n\nexport enum RouteNames {\n    LOGIN = '/login',\n    EVENT = '/'\n}\n\nexport const publicRoutes: IRoute[] = [\n    {path: RouteNames.LOGIN, exact: true, component: Login}\n]\n\nexport const privateRoutes: IRoute[] = [\n    {path: RouteNames.EVENT, exact: true, component: Event}\n]\n","import {AuthActionCreators} from \"./auth/action-creators\";\nimport {EventActionCreators} from \"./event/action-creators\";\n\nexport const allActionCreators = {\n    ...AuthActionCreators,\n    ...EventActionCreators\n}\n","import {useDispatch} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport {allActionCreators} from \"../store/reducers/action-creators\";\n\n\nexport const useActions = () => {\n    const dispatch = useDispatch();\n    return bindActionCreators(allActionCreators, dispatch);\n}\n\n","import React, {FC, useState} from 'react';\nimport {Button, Form, Input} from \"antd\";\nimport {rules} from \"../utils/rules\";\nimport {useDispatch} from \"react-redux\";\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport {useActions} from \"../hooks/useActions\";\n\nconst LoginForm: FC = () => {\n    const {error, isLoading} = useTypedSelector(state => state.auth);\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const {login} = useActions()\n\n    const submit = () => {\n        login(username, password)\n    }\n\n    return (\n        <Form\n            onFinish={submit}\n        >\n            {error && <div style={{color: 'red'}}>\n                {error}\n            </div>}\n            <Form.Item\n                label=\"Имя пользователя\"\n                name=\"username\"\n                rules={[rules.required(\"Пожалуйста введите имя пользователя!\")]}\n            >\n                <Input\n                    value={username}\n                    onChange={e => setUsername(e.target.value)}\n                />\n            </Form.Item>\n            <Form.Item\n                label=\"Пароль\"\n                name=\"password\"\n                rules={[rules.required(\"Пожалуйста введите пароль\")]}\n            >\n                <Input\n                    value={password}\n                    onChange={e => setPassword(e.target.value)}\n                    type={\"password\"}\n                />\n            </Form.Item>\n            <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n                    Войти\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default LoginForm;\n","import React, {FC} from 'react';\nimport {Card, Layout, Row} from \"antd\";\nimport LoginForm from \"../components/LoginForm\";\n\nconst Login: FC = () => {\n    return (\n        <Layout>\n            <Row justify=\"center\" align=\"middle\" className=\"h100\">\n                <Card>\n                    <LoginForm/>\n                </Card>\n            </Row>\n        </Layout>\n    );\n};\n\nexport default Login;\n","export const formatDate = (date: Date): string => {\n    const year = date.getFullYear();\n    const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\n    return `${year}.${month}.${day}`\n}\n","import React, {FC} from 'react';\nimport {Calendar} from \"antd\";\nimport {IEvent} from \"../models/IEvent\";\nimport {Moment} from \"moment\";\nimport {formatDate} from \"../utils/date\";\n\ninterface EventCalendarProps {\n    events: IEvent[];\n}\n\nconst EventCalendar: FC<EventCalendarProps> = (props) => {\n\n    function dateCellRender(value: Moment) {\n        const formatedDate = formatDate(value.toDate());\n        const currentDayEvents = props.events.filter(ev => ev.date === formatedDate);\n        return (\n            <div>\n                {currentDayEvents.map((ev, index) =>\n                    <div key={index}>{ev.description}</div>\n                )}\n            </div>\n        );\n    }\n\n    return (\n        <Calendar\n            dateCellRender={dateCellRender}\n        />\n    );\n};\n\nexport default EventCalendar;\n","import React, {FC, useState} from 'react';\nimport {Button, DatePicker, Form, Input, Row, Select} from \"antd\";\nimport {rules} from \"../utils/rules\";\nimport {IUser} from \"../models/IUser\";\nimport {IEvent} from \"../models/IEvent\";\nimport {Moment} from \"moment\";\nimport {formatDate} from \"../utils/date\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\n\ninterface EventFormProps {\n    guests: IUser[],\n    submit: (event: IEvent) => void\n}\n\nconst EventForm: FC<EventFormProps> = (props) => {\n    const [event, setEvent] = useState<IEvent>({\n        author: '',\n        date: '',\n        description: '',\n        guest: ''\n    } as IEvent);\n    const {user} = useTypedSelector(state => state.auth)\n\n    const selectDate = (date: Moment | null) => {\n        if (date) {\n            setEvent({...event, date: formatDate(date.toDate())})\n        }\n    }\n\n    const submitForm = () => {\n        props.submit({...event, author: user.username})\n    }\n\n    return (\n        <Form onFinish={submitForm}>\n            <Form.Item\n                label=\"Описание события\"\n                name=\"description\"\n                rules={[rules.required()]}\n            >\n                <Input\n                    onChange={e => setEvent({...event, description: e.target.value})}\n                    value={event.description}\n                />\n            </Form.Item>\n            <Form.Item\n                label=\"Дата события\"\n                name=\"date\"\n                rules={[rules.required(), rules.isDateAfter(\"Нельзя создать событие в прошлом\")]}\n            >\n                <DatePicker\n                    onChange={(date) => selectDate(date)}\n                />\n            </Form.Item>\n            <Form.Item\n                label=\"Выберите гостя\"\n                name=\"guest\"\n                rules={[rules.required()]}\n            >\n                <Select onChange={(guest: string) => setEvent({...event, guest})}>\n                    {props.guests.map(guest =>\n                        <Select.Option key={guest.username} value={guest.username}>\n                            {guest.username}\n                        </Select.Option>\n                    )}\n                </Select>\n            </Form.Item>\n            <Row justify=\"end\">\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Создать\n                    </Button>\n                </Form.Item>\n            </Row>\n        </Form>\n    );\n};\n\nexport default EventForm;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Button, Layout, Modal, Row } from 'antd';\nimport EventCalendar from '../components/EventCalendar';\nimport EventForm from '../components/EventForm';\nimport { useActions } from '../hooks/useActions';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { IEvent } from '../models/IEvent';\n\nconst Event: FC = () => {\n    const [modalVisible, setModalVisible] = useState(false);\n    const { fetchGuests, createEvent, fetchEvents } = useActions();\n    const { guests, events } = useTypedSelector(state => state.event);\n    const { user } = useTypedSelector(state => state.auth);\n\n    useEffect(() => {\n        fetchGuests();\n        fetchEvents(user.username);\n    }, []);\n\n    const addNewEvent = (event: IEvent) => {\n        setModalVisible(false);\n        createEvent(event);\n    };\n\n    return (\n        <Layout>\n            <EventCalendar events={events} />\n            <Row justify=\"center\">\n                <Button onClick={() => setModalVisible(true)}>Добавить событие</Button>\n            </Row>\n            <Modal\n                title=\"Добавить событие\"\n                visible={modalVisible}\n                footer={null}\n                onCancel={() => setModalVisible(false)}>\n                <EventForm guests={guests} submit={addNewEvent} />\n            </Modal>\n        </Layout>\n    );\n};\n\nexport default Event;\n","import React from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport {privateRoutes, publicRoutes, RouteNames} from \"../router\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\n\nconst AppRouter = () => {\n    const {isAuth} = useTypedSelector(state => state.auth);\n\n    return (\n        isAuth ?\n            <Switch>\n                {privateRoutes.map(route =>\n                    <Route path={route.path}\n                           exact={route.exact}\n                           component={route.component}\n                           key={route.path}\n                    />\n                )}\n                <Redirect to={RouteNames.EVENT}/>\n            </Switch>\n            :\n            <Switch>\n                {publicRoutes.map(route =>\n                    <Route path={route.path}\n                           exact={route.exact}\n                           component={route.component}\n                           key={route.path}\n                    />\n                )}\n                <Redirect to={RouteNames.LOGIN}/>\n            </Switch>\n    );\n};\n\nexport default AppRouter;\n","import React, {FC} from 'react';\nimport {Layout, Menu, Row} from \"antd\";\nimport {useHistory} from 'react-router-dom';\nimport {RouteNames} from \"../router\";\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\nimport {useDispatch} from \"react-redux\";\nimport {useActions} from \"../hooks/useActions\";\n\nconst Navbar: FC = () => {\n    const router = useHistory()\n    const {isAuth, user} = useTypedSelector(state => state.auth);\n    const {logout} = useActions()\n\n\n    return (\n        <Layout.Header>\n            <Row justify=\"end\">\n                {isAuth\n                    ?\n                    <>\n                        <div style={{color: 'white'}}>\n                            {user.username}\n                        </div>\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n\n                            <Menu.Item\n                                onClick={logout}\n                                key={1}\n                            >\n                                Выйти\n                            </Menu.Item>\n                        </Menu>\n                    </>\n                    :\n                    <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n                        <Menu.Item\n                            onClick={() => router.push(RouteNames.LOGIN)}\n                            key={1}\n                        >\n                            Логин\n                        </Menu.Item>\n                    </Menu>\n                }\n            </Row>\n        </Layout.Header>\n    );\n};\n\nexport default Navbar;\n","import React, {FC, useEffect} from 'react';\nimport AppRouter from \"./components/AppRouter\";\nimport Navbar from \"./components/Navbar\";\nimport {Layout} from \"antd\";\nimport './App.css';\nimport {useActions} from \"./hooks/useActions\";\nimport {IUser} from \"./models/IUser\";\n\nconst App:FC = () => {\n    const {setUser, setIsAuth} = useActions();\n\n    useEffect(() => {\n        if(localStorage.getItem('auth')) {\n            setUser({username: localStorage.getItem('username' || '')} as IUser)\n            setIsAuth(true);\n        }\n    }, [])\n\n    return (\n        <Layout>\n            <Navbar/>\n            <Layout.Content>\n                <AppRouter />\n            </Layout.Content>\n        </Layout>\n    );\n};\n\nexport default App;\n","import {AuthAction, AuthActionEnum, AuthState} from \"./types\";\nimport {IUser} from \"../../../models/IUser\";\n\n\nconst initialState: AuthState = {\n    isAuth: false,\n    error: '',\n    isLoading: false,\n    user: {} as IUser\n}\n\nexport default function authReducer(state = initialState, action: AuthAction): AuthState {\n    switch (action.type) {\n        case AuthActionEnum.SET_AUTH:\n            return {...state, isAuth: action.payload, isLoading: false}\n        case AuthActionEnum.SET_USER:\n            return {...state, user: action.payload}\n        case AuthActionEnum.SET_ERROR:\n            return {...state, error: action.payload, isLoading: false}\n        case AuthActionEnum.SET_IS_LOADING:\n            return {...state, isLoading: action.payload}\n        default:\n            return state;\n    }\n}\n","import {EventAction, EventActionEnum, EventState} from \"./types\";\n\n\nconst initialState: EventState = {\n    events: [],\n    guests: []\n}\n\nexport default function EventReducer(state = initialState, action: EventAction): EventState {\n    switch (action.type) {\n        case EventActionEnum.SET_GUESTS:\n            return {...state, guests: action.payload}\n        case EventActionEnum.SET_EVENTS:\n            return {...state, events: action.payload}\n        default:\n            return state;\n    }\n}\n","import auth from './auth'\nimport event from './event';\n\nexport default {\n    auth,\n    event\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nconst rootReducer = combineReducers(reducers)\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}